package util;

import java.lang.reflect.InvocationTargetException;

/**
 * The DefaultLoader is a concrete class, help to returns an instance of an
 * object, given a fully qualified class name (package.classname) of a object.
 *
 */
public class DefaultLoader {

	/**
	 * Singleton pattern
	 */
	public static DefaultLoader Singleton = new DefaultLoader();
	
	private DefaultLoader() {}	
	
	/**
	 * @param objectType the name string of the object to load/
	 * @return the loaded Object
	 * @throws SecurityException throws SecurityException 
	 * @throws ClassNotFoundException throws ClassNotFoundException
	 * @throws InstantiationException throws InstantiationException
	 * @throws IllegalAccessException throws IllegalAccessException
	 * @throws IllegalArgumentException throws IllegalArgumentException
	 * @throws InvocationTargetException throws InvocationTargetException
	 */
	public Object loadObject(String objectType) throws SecurityException, ClassNotFoundException,
			InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
		Object[] args = new Object[] {};
		java.lang.reflect.Constructor<?> cs[] = Class.forName(objectType).getConstructors();
		// get all the constructors
		java.lang.reflect.Constructor<?> c = null;
		for (int i = 0; i < cs.length; i++) { // find the first constructor with the right number of input
												// parameters
			if (args.length == (cs[i]).getParameterTypes().length) {
				c = cs[i];
				break;
			}
		}
		return c.newInstance(args);
	}

}