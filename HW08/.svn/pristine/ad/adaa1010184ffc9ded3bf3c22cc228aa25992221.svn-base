package model.receiver;

import java.io.Serializable;
import java.rmi.RemoteException;
import java.util.UUID;

import common.DataPacketAlgoCmd;
import common.DataPacketChatRoom;
import common.IReceiver;
import common.IUser;

/**
 * Receiver remote stub proxy object.
 *
 */
public class ProxyReceiver implements IReceiver, Serializable {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 4350556741530047992L;
	private IReceiver receiver;
	
	/**
	 * Constructor.
	 * @param receiver a receiver remote stub.
	 */
	public ProxyReceiver(IReceiver receiver) {
		this.receiver = receiver;
	}

	@Override
	public <T> DataPacketChatRoom<Object> receive(DataPacketChatRoom<T> data) throws RemoteException {
		return receiver.receive(data);
	}

	@Override
	public IUser getUserStub() throws RemoteException {
		return receiver.getUserStub();
	}

	@Override
	public UUID getUUID() throws RemoteException {
		return receiver.getUUID();
	}
	
	/**
	 * Overridden equals() method to compare UUID's
	 * @return  Equal if UUID's are equal.  False otherwise.
	 */
	@Override
	public boolean equals(Object obj){
		if (this == obj) return true;
		if (!(obj instanceof IReceiver)) return false;
		IReceiver that = (IReceiver) obj;
		try {
			return this.getUUID().equals(that.getUUID());
		} catch (RemoteException e) {
			System.err.println("ProxyReceiver.equals(): error getting UUID: "+ e);
			e.printStackTrace();
		}
		return false;
	}		

	/**
	 * Overridden hashCode() method to create a hashCode from that is hashCode of the UUID since
	 * equality is based on equality of UUID.
	 * @return a hashCode of the UUID.	
	 */
	@Override
	public int hashCode(){
		try {
			// hashCode is shorter than UUID, but Java spec says that if two objects are equal then
			// their hashCodes must also be equal, which will be true here since equals() is based on 
			// UUID equality.  Java does NOT require that unequal entities have unequal hashCodes. 
			return this.getUUID().hashCode();
		} catch (RemoteException e) {
			// Deal with the exception without throwing a RemoteException.
			System.out.println("ProxyReceiver.hashCode(): Error calling remote method on IReceiver stub: " + receiver.hashCode());
			e.printStackTrace();
			return super.hashCode();  // return some sort of hashCode
		}
	}
	
	@Override
	public String toString() {
		try {
			return "receiver of " + receiver.getUserStub().getName() + "'s chat room: ";
		} catch (RemoteException e) {
			// Deal with the exception without throwing a RemoteException.
			System.out.println("ProxyReceiver.toString(): Error calling remote method on IReceiver stub: " + receiver.toString());
			e.printStackTrace();
			return super.toString();  // return some sort of toString.
		}
	}

	@Override
	public <T> DataPacketAlgoCmd<T> getCmd(Class<T> id) throws RemoteException {
		return receiver.getCmd(id);
	}
}
