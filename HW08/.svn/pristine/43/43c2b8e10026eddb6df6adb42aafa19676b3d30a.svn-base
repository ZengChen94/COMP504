package view;

import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JTextField;
import java.awt.GridLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import java.awt.Dimension;

import javax.swing.border.TitledBorder;

import javax.swing.UIManager;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.awt.event.ActionEvent;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTabbedPane;

/**
 * The chat room GUI view.
 * @param <HostObj> the object in the host list.
 * @param <ChatRoomObj> the object in the chat room list.
 */
public class ChatRoomAppView<HostObj, ChatRoomObj> extends JFrame {

	private JPanel contentPane = new JPanel();;
	private final JTextField textField_1 = new JTextField();
	private JTextField textField_2 = new JTextField();;
	private JTextField textField_3 = new JTextField();;
	private JTextField textField_4 = new JTextField();;
	private JTextField textField_inputMsg = new JTextField();;
	
	private final JPanel panel_top = new JPanel();
	private final JPanel panel_5 = new JPanel();
	private final JLabel lblUsername = new JLabel("Username:");
	private final JLabel lblServerName = new JLabel("Server name:");
	private final JPanel panel_0 = new JPanel();
	private final JPanel panel_1 = new JPanel();
	private final JPanel panel_2 = new JPanel();
	private final JButton btnStart = new JButton("START");
	private final JPanel panel_3 = new JPanel();
	private final JPanel panel_6 = new JPanel();
	private final JButton btnMakeIt = new JButton("Make it!");
	private final JButton btnConnect = new JButton("CONNECT");
	private final JComboBox<HostObj> comboBox = new JComboBox<>();
	private final JButton btnRequest = new JButton("Request");
	private final JPanel panel_4 = new JPanel();
	private final JButton btnExit = new JButton("EXIT ALL & QUIT");
	
	private final JPanel panel_bottom = new JPanel();
	private final JPanel pnlTaInput = new JPanel();
	private final JButton btnSendText = new JButton("Send Text");
	private final JButton btnSendFile = new JButton("Send File");
	private final JButton btnSendEmoji = new JButton("Send Emoji");
	private final JTabbedPane panel_tab = new JTabbedPane(JTabbedPane.TOP);
	private final JPanel pnlInfo = new JPanel();
	
	private IView2ModelAdapter<HostObj, ChatRoomObj> _view2ModelAdapter;
	private Map<Integer, ChatRoomObj> chatRooms;
	private final JPanel panel_10 = new JPanel();
	private final JComboBox<ChatRoomObj> comboBox_1 = new JComboBox<>();
	private final JButton btnJoin = new JButton("JOIN");
	
	private Map<ChatRoomObj, ChatRoomComponent<HostObj,ChatRoomObj>> chatRoomComponentMap;
	private final JScrollPane scrollPane = new JScrollPane();
	private final JTextArea taInfo = new JTextArea();

	/**
	 * Launch the application.
	 * @param args input arguments.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					(new ChatRoomAppView<>(null)).start();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 * @param _view2ModelAdapter the view to model adapter.
	 */
	public ChatRoomAppView(IView2ModelAdapter<HostObj, ChatRoomObj> _view2ModelAdapter) {
		this._view2ModelAdapter = _view2ModelAdapter;
		chatRooms = new HashMap<>();
		chatRoomComponentMap = new HashMap<>();
	}

	private void initGUI() {
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 1200, 500);

		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		contentPane.setLayout(new BorderLayout(0, 0));
		setContentPane(contentPane);
		
		contentPane.add(panel_top, BorderLayout.NORTH);
		panel_top.add(panel_5);
		panel_5.setLayout(new GridLayout(0, 1, 0, 0));
		panel_5.add(lblUsername);
		panel_5.add(lblServerName);
		panel_top.add(panel_0);
		panel_0.setLayout(new GridLayout(0, 1, 0, 0));
		panel_0.add(textField_1);
		textField_1.setColumns(10);
		panel_0.add(textField_2);
		textField_2.setColumns(10);
		panel_top.add(panel_1);
		panel_1.setLayout(new GridLayout(0, 1, 0, 0));
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				_view2ModelAdapter.startServer(textField_1.getText(), textField_2.getText());
			}
		});
		panel_1.add(btnStart);
		panel_6.setBorder(new TitledBorder(null, "Make Chat Room", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel_top.add(panel_6);
		panel_6.setLayout(new GridLayout(0, 1, 0, 0));
		panel_6.add(textField_4);
		textField_4.setColumns(12);
		btnMakeIt.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				_view2ModelAdapter.makeChatRoom(textField_4.getText());
			}
		});
		panel_6.add(btnMakeIt);
		panel_2.setBorder(new TitledBorder(UIManager.getBorder("TitledBorder.border"), "Connect to...", TitledBorder.LEADING, TitledBorder.TOP, null, new Color(0, 0, 0)));
		panel_top.add(panel_2);
		panel_2.setLayout(new GridLayout(0, 1, 0, 0));
		panel_2.add(textField_3);
		textField_3.setColumns(12);
		btnConnect.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				_view2ModelAdapter.connectToIP(textField_3.getText());
			}
		});
		panel_2.add(btnConnect);
		panel_3.setBorder(new TitledBorder(null, "Connected Hosts", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel_top.add(panel_3);
		panel_3.setLayout(new GridLayout(0, 1, 0, 0));
		panel_3.add(comboBox);
		panel_3.setPreferredSize(new Dimension(150, 100));// hardCoded sizing
		panel_3.setMaximumSize(new Dimension(250, 100));  // hardCoded sizing
		panel_3.setMinimumSize(new Dimension(150, 100));  // hardCoded sizing
		JButton btnInvite = new JButton("Invite");
		btnInvite.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				_view2ModelAdapter.inviteUser(comboBox.getItemAt(comboBox.getSelectedIndex()));
			}
		});
		panel_3.add(btnInvite);
		btnRequest.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				_view2ModelAdapter.requestChatRooms(comboBox.getItemAt(comboBox.getSelectedIndex()));
			}
		});
		panel_3.add(btnRequest);
		
		panel_10.setPreferredSize(new Dimension(150, 80));// hardCoded sizing
		panel_10.setMaximumSize(new Dimension(250, 80));  // hardCoded sizing
		panel_10.setMinimumSize(new Dimension(150, 80));  // hardCoded sizing
		panel_10.setBorder(new TitledBorder(null, "Choose a room", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		
		panel_top.add(panel_10);
		panel_10.setLayout(new GridLayout(0, 1, 0, 0));
		
		panel_10.add(comboBox_1);
		btnJoin.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				joinChatRoom(comboBox_1.getItemAt(comboBox_1.getSelectedIndex()));
			}
		});
		
		panel_10.add(btnJoin);
		panel_top.add(panel_4);
		panel_4.setLayout(new GridLayout(0, 1, 0, 0));
		btnExit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				_view2ModelAdapter.exit();
			}
		});
		panel_4.add(btnExit);
	
		contentPane.add(panel_bottom, BorderLayout.SOUTH);
		panel_bottom.add(pnlTaInput);
		pnlTaInput.setLayout(new GridLayout(0, 1, 0, 0));
		pnlTaInput.add(textField_inputMsg);
		textField_inputMsg.setColumns(70);
		btnSendText.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				_view2ModelAdapter.sendText(textField_inputMsg.getText());
			}
		});
		panel_bottom.add(btnSendText);
		btnSendFile.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// TODO send file
//				_view2ModelAdapter.sendFile();
			}
		});
		panel_bottom.add(btnSendFile);
		btnSendEmoji.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// TODO send Emoji
			}
		});
		panel_bottom.add(btnSendEmoji);
		contentPane.add(panel_tab, BorderLayout.CENTER);
		panel_tab.addTab("Info", null, pnlInfo, null);
		pnlInfo.setLayout(new BorderLayout(0, 0));
		pnlInfo.add(scrollPane, BorderLayout.CENTER);
		scrollPane.setViewportView(taInfo);
		
		_view2ModelAdapter.makeChatRoom("Default Room");
	}
	
	/**
	 * create a chat room component.
	 * @param chatRoom the chat room object. 
	 * @param chatRoomName the name of the chat room.
	 */
	public void createChatRoomComponent(ChatRoomObj chatRoom, String chatRoomName) {
		ChatRoomComponent<HostObj, ChatRoomObj> chatRoomComponent = new ChatRoomComponent<>(chatRoom, _view2ModelAdapter);
		chatRoomComponentMap.put(chatRoom, chatRoomComponent);
		panel_tab.addTab(chatRoomName, null, chatRoomComponent, null);
	}
	
	/**
	 * start the GUI.
	 */
	public void start() {
		initGUI();
		setVisible(true);
	}
	
	/**
	 * List hosts in the combo box.
	 * @param hosts the items to put in the combo box.
	 */
	public void listConnectedHosts(List<HostObj> hosts) {
		comboBox.removeAllItems();
		for (HostObj host: hosts) {
			comboBox.addItem(host);
		}
		comboBox.setSelectedIndex(0);
	}
	
	/**
	 * joint a selected chat room.
	 * @param chatRoom the selected chat room to join.
	 */
	public void joinChatRoom(ChatRoomObj chatRoom) {
		chatRooms.put(chatRooms.size(), chatRoom);
		_view2ModelAdapter.joinChatRoom(chatRoom);
	}
	
	/**
	 * list users in this chat room
	 * @param chatRoom a chat room object
	 * @param users the users in the chat room.
	 */
	public void listUsersInChatRoom(ChatRoomObj chatRoom, String users) {
		ChatRoomComponent<HostObj,ChatRoomObj> chatRoomComponent = chatRoomComponentMap.get(chatRoom);
		chatRoomComponent.listUsers(users);
	}
	
	/**
	 * append text in the chat room text area.
	 * @param chatRoom a chat room object.
	 * @param text the test to append
	 */
	public void appendText(ChatRoomObj chatRoom, String text) {
		ChatRoomComponent<HostObj,ChatRoomObj> chatRoomComponent = chatRoomComponentMap.get(chatRoom);
		chatRoomComponent.textAreaAppend(text);
	}

	/**
	 * append info in the info component.
	 * @param text the text to append in the info component.
	 */
	public void appendInfo(String text) {
		taInfo.append(text);
	}

	/**
	 * list the chat rooms the selected remote host created or joined.
	 * @param chatRooms a list of chat rooms.
	 */
	public void listChatRooms(List<ChatRoomObj> chatRooms) {
		// TODO change this to minMVC
		comboBox_1.removeAllItems();
		for (ChatRoomObj chatRoom : chatRooms) {
			comboBox_1.addItem(chatRoom);
		}
		comboBox_1.setSelectedIndex(0);
	}

}
