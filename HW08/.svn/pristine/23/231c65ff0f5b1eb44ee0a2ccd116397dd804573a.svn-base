package model.chatroom;

import java.rmi.RemoteException;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

import common.DataPacketChatRoom;
import common.IChatRoom;
import common.IReceiver;

/**
 * The abstract chat room.
 *
 */
public abstract class AChatRoom implements IChatRoom {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = -9020884881226695481L;
	/**
	 * the name of the chat room.
	 */
	private final String chatRoomName;
	
	private final UUID uuid = UUID.randomUUID();
	
	/**
	 * the users in this chat room.
	 */
	private Set<IReceiver> receivers;
	
	/**
	 * constructor.
	 * @param chatRoomName the name of the chat room.
	 */
	public AChatRoom(String chatRoomName) {
		this.chatRoomName = chatRoomName;
		receivers = new HashSet<>();
	}
	
	@Override
	public String getName() {
		return chatRoomName;
	}
	
	@Override
	public Iterable<IReceiver> getIReceiverStubs() {
		return receivers;
	}
	
	@Override
	public <T> void sendPacket(DataPacketChatRoom<T> data) {
		for (IReceiver receiver : receivers) {
			try {
				receiver.receive(data);
			} catch (RemoteException e) {
				System.out.println("remote receiver " + receiver + " receive data packet error");
				e.printStackTrace();
			}
		}
	}
	
	
	@Override
	public String toString() {
		return getName();
	}
	
	@Override
	public UUID getUUID() {
		return uuid;
	}

	@Override
	public boolean addIReceiverStubLocally(IReceiver receiver) {
		return receivers.add(receiver);
	}

	@Override
	public boolean removeIReceiverStubLocally(IReceiver receiver) {
		return receivers.remove(receiver);
	}
	
}
