package model;

import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.function.Consumer;

import provided.rmiUtils.IRMIUtils;
import provided.rmiUtils.IRMI_Defs;
import provided.rmiUtils.RMIUtils;

public class ChatRoomAppModel {
	
	private IModel2ViewAdapter _model2ViewAdapter;
	
	private Consumer<String> outputCmd = s -> ChatRoomAppModel.this._model2ViewAdapter.appendInfo((s) + "\n");
	
	private IRMIUtils rmiUtils = new RMIUtils(outputCmd);
	
	private Registry registry;
	
	// the hosts on the connected remote ip.
	private List<IHost> hosts;
	// the chat rooms created or joined.
	private List<IChatRoom> chatRooms;
	// the available ports on the local ip.
	private Queue<Integer> availPorts;
	
	
	/**
	 * constructor.
	 * @param _model2ViewAdapter the local model to view adapter.
	 */
	public ChatRoomAppModel(IModel2ViewAdapter _model2ViewAdapter) {
		this._model2ViewAdapter = _model2ViewAdapter;
		hosts = new ArrayList<>();
		chatRooms = new ArrayList<>();
		availPorts = new LinkedList<>();
		// set the available ports number from 2101 to 2199, 
		// 2100 is the port for host.
		for (int i = 2101; i < 2200; i++) {
			availPorts.offer(i);
		}
	}

	/**
	 * Start the server. Create a host, export to host stub, bind the host stub to the register.
	 * add host to hosts list.
	 * @param userName the user name of this host.
	 * @param serverName the server name.
	 */
	public void startServer(String userName, String serverName) {
		if (availPorts.isEmpty()) {
			_model2ViewAdapter.appendInfo("created too many hosts on this ip, not available port numbers.\n");
			return;
		}
		try {
			int boundPort = availPorts.poll();
			Host host = new Host(serverName, rmiUtils.getLocalAddress(), boundPort);
			IHost hostStub = (IHost) UnicastRemoteObject.exportObject(host, boundPort);
			registry.bind(serverName, hostStub);
			_model2ViewAdapter.appendInfo("Host bound to " + serverName + " resigter \n");
			hosts.add(host);
		} catch (Exception e) {
			System.err.println("Host exception" + "\n");
			e.printStackTrace();
			System.exit(-1);
		}
	}

	/**
	 * Create a Chat Room. Create a chatRoom, export to chatRoom stub.
	 * add chatRoom to chatRooms list.
	 * @param chatRoomName the name of the chat room.
	 */
	public void makeChatRoom(String chatRoomName) {
		if (availPorts.isEmpty()) {
			_model2ViewAdapter.appendInfo("created too many chat rooms, not available port numbers.\n");
			return;
		}
		try {
			int boundPort = availPorts.poll();
			ChatRoom chatRoom = new ChatRoom(chatRoomName);
			IChatRoom chatRoomStub = (IChatRoom) UnicastRemoteObject.exportObject(chatRoom, boundPort);
			chatRooms.add(chatRoomStub);
		} catch (Exception e) {
			System.err.println("Chat Room exception" + "\n");
			e.printStackTrace();
			System.exit(-1);
		}
	}

	/**
	 * Connect to a IP. List all the 
	 * @param ipAddress the remote ip address.
	 */
	public void connectToIP(String ipAddress) {
		try {
			// get the remote registry.
			_model2ViewAdapter.appendInfo("Locating registry at " + ipAddress +"...\n");
			Registry registry = rmiUtils.getRemoteRegistry(ipAddress);
			_model2ViewAdapter.appendInfo("Found registry : " + registry + "\n");
			String[] hostNames = registry.list();
			hosts = new ArrayList<>();
			for (String hostName: hostNames) {
				IHost host = (IHost) registry.lookup(hostName);
				hosts.add(host);
				_model2ViewAdapter.appendInfo("Found hostStub: " + host + "\n");
			}
			_model2ViewAdapter.listConnectedHosts(hosts);
			
		} catch (Exception e) {
			_model2ViewAdapter.appendInfo("Error connecting to " + ipAddress + ": " + e + "\n");
			e.printStackTrace();
		}
	}

	public void inviteUser(IHost host) {
		// TODO Auto-generated method stub
	}

	public void joinChatRoom(IHost host) {
		// TODO Auto-generated method stub
		
	}

	public void exit() {
		// TODO Auto-generated method stub
		
	}

	public void exitChatRoom(IChatRoom chatRoom) {
		// TODO Auto-generated method stub
		
	}

	public void sendText(String text) {
		// TODO Auto-generated method stub
	}

	/**
	 * start the model, start RMI.
	 */
	public void start() {
		_model2ViewAdapter.appendInfo("starting RMI... \n");
		rmiUtils.startRMI(IRMI_Defs.CLASS_SERVER_PORT_SERVER);
		_model2ViewAdapter.appendInfo("Looking for registry... \n");
		registry = rmiUtils.getLocalRegistry();
		_model2ViewAdapter.appendInfo("Found registry: " + registry + "\n");
	}

}
