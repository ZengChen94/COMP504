package model.user;

import java.rmi.RemoteException;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

import common.DataPacketAlgoCmd;
import common.IChatRoom;
import common.IUser;
import model.IMainModel2ViewAdapter;
import model.cmd.DefaultCmd;
import provided.datapacket.ADataPacket;
import provided.datapacket.DataPacketAlgo;
import provided.extvisitor.IExtVisitorCmd;

/**
 * a concrete user class.
 *
 */
public class User implements IUser {
	
	private final String userName;
	private UUID uuid = UUID.randomUUID();
	private Set<IChatRoom> chatRooms = new HashSet<>();
	private IMainModel2ViewAdapter _viewAdapter;
	private DataPacketAlgo<?, ?> algo;
	
	/**
	 * constructor.
	 * @param userName is the name of the user.
	 * @param _viewAdapter is the user to view adapter.
	 * @param algo is the algo for data packet.
	 */
	public User(String userName, IMainModel2ViewAdapter _viewAdapter, DataPacketAlgo<?, ?> algo) {
		this.userName = userName;
		this._viewAdapter = _viewAdapter;
		this.algo = algo;
	}

	@Override
	public String getName() throws RemoteException {
		return userName;
	}
	
	@Override
	public UUID getUUid() throws RemoteException {
		return uuid;
	}

	@Override
	public Iterable<IChatRoom> getChatRooms() throws RemoteException {
		return chatRooms;
	}
	
	/**
	 * Connect to a remote user, and show the chat room list userStub has joined in the main view.
	 * and remote user auto connect back.
	 */
	@Override
	public void connect(IUser user) throws RemoteException {
		(new Thread() {
			@Override
			public void run() {
				try {
					_viewAdapter.listChatRooms(user.getChatRooms());
					// auto connect back.
					if (!user.equals(User.this)) {
						user.connect(User.this);
					}
					_viewAdapter.appendInfo("connect to user: " + user);
				} catch (RemoteException e) {
					System.out.println("remote exception when connecting remote user");
					e.printStackTrace();
				}
			}
		}).start();
	}

	@Override
	public <T> DataPacketAlgoCmd<T> getCmd(Class<T> id) throws RemoteException {
		IExtVisitorCmd<?, Class<?>, ?, ADataPacket> cmd = algo.getCmd(id);
		if (cmd == null) {
			return new DefaultCmd<T>();
		}
		return (DataPacketAlgoCmd<T>) cmd;
	}
	
	/**
	 * User join a chat room.
	 * @param chatRoom is the chat room the user want to join.
	 */
	public void joinChatRoom(IChatRoom chatRoom) {
		chatRooms.add(chatRoom);
	}
}
