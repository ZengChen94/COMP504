package model;

import java.io.File;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ImageIcon;

import common.DataPacketChatRoom;
import common.IChatRoom;
import common.IReceiver;
import common.IUser;

/**
 * The chat room model in the chat room mini MVC.
 *
 */
public class ChatRoomModel {
	
	/**
	 * Chat room model to chat room view adapter.
	 */
	private IChatRoomModel2ChatRoomViewAdapter _viewAdapter;
	private IChatRoomModel2ModelAdapter _mainModelAdapter;
	private IChatRoom chatRoom;
	/**
	 * The receiver for this chat room, receives data packets.
	 */
	private IReceiver receiver;
	
	/**
	 * Constructor.
	 * @param receiver The receiver for this chat room, receives data packets.
	 * @param chatRoom the chat room for this chat room model.
	 * @param _mainModelAdapter the chat room model to main view adapter.
	 * @param _viewAdapter the chat room model to chat room view adapter.
	 */
	public ChatRoomModel(IReceiver receiver, IChatRoom chatRoom, IChatRoomModel2ChatRoomViewAdapter _viewAdapter, IChatRoomModel2ModelAdapter _mainModelAdapter) {
		this.receiver = receiver;
		this.chatRoom = chatRoom;
		this._viewAdapter = _viewAdapter;
		this._mainModelAdapter = _mainModelAdapter;
	}

	/**
	 * User exit this chat room.
	 */
	public void exitChatRoom() {
		_viewAdapter.appendMessage("this chat room is quiting...");
		_mainModelAdapter.exitChatRoom(chatRoom);
	}

	/**
	 * Send text to the chat room in this chat room model.
	 * @param text is sent to the chat room in this chat room model.
	 */
	public void sendText(String text) {
		chatRoom.sendPacket(new DataPacketChatRoom<String>(String.class, text, receiver));
//		_viewAdapter.appendMessage("message sent:" + text);
	}

	/**
	 * Send file to the chat room in this chat room model.
	 * @param file is sent to the chat room in this chat room model.
	 */
	public void sendFile(File file) {
		chatRoom.sendPacket(new DataPacketChatRoom<File>(File.class, file, receiver));
//		_viewAdapter.appendMessage("file sent: " + file);
	}

	/**
	 * Send emoji to the chat room in this chat room model.
	 * @param emoji is sent to the chat room in this chat room model.
	 */
	public void sendEmoji(ImageIcon emoji) {
		chatRoom.sendPacket(new DataPacketChatRoom<ImageIcon>(ImageIcon.class, emoji, receiver));
//		_viewAdapter.appendMessage("emoji sent: " + emoji);
	}

	/**
	 * start the chat room model
	 */
	public void start() {
		listUsers();
	}
	
	/**
	 * Refresh the user list to list users.
	 */
	public void listUsers() {
		List<IUser> users = new ArrayList<>();
		for (IReceiver receiver : chatRoom.getIReceiverStubs()) {
			try {
				users.add(receiver.getUserStub());
			} catch (RemoteException e) {
				System.out.println("failed to get user stubs from receiver: " + receiver);
				e.printStackTrace();
			}
		}
		_viewAdapter.listUsers(users);
	}

	/**
	 * Remove a receiver from this chat room.
	 * @param receiver is the receiver to remove from this chat room.
	 */
	public void removeReceiver(IReceiver receiver) {
		chatRoom.removeIReceiverStubLocally(receiver);
	}

	/**
	 * Add a receiver to this chat room.
	 * @param receiver is the receiver to add to this chat room.
	 */
	public void addReceiver(IReceiver receiver) {
		chatRoom.addIReceiverStubLocally(receiver);
	}

	/**
	 * Get chat room object from chat room model.
	 * @return chat room object in chat room model.
	 */
	public IChatRoom getChatRoom() {
		return chatRoom;
	}
}
