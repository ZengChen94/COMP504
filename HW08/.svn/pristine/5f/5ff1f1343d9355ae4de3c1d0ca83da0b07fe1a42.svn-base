package model.user;

import java.io.Serializable;
import java.rmi.RemoteException;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

import common.IChatRoom;
import common.IUser;
import model.IMainModel2ViewAdapter;

/**
 * a concrete user class.
 *
 */
public class User implements IUser, Serializable {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = -7304768653026278565L;
	private final String userName;
	private UUID uuid = UUID.randomUUID();
	private Set<IChatRoom> chatRooms = new HashSet<>();
	/**
	 * Main model to main view adapter.
	 */
	private transient IMainModel2ViewAdapter _viewAdapter;
	
	/**
	 * constructor.
	 * @param userName is the name of the user.
	 * @param _viewAdapter is the user to view adapter.
	 */
	public User(String userName, IMainModel2ViewAdapter _viewAdapter) {
		this.userName = userName;
		this._viewAdapter = _viewAdapter;
	}

	@Override
	public String getName() throws RemoteException {
		return userName;
	}
	
	@Override
	public UUID getUUID() throws RemoteException {
		return uuid;
	}

	@Override
	public Iterable<IChatRoom> getChatRooms() throws RemoteException {
		return chatRooms;
	}
	
	@Override
	public void connect(IUser user) throws RemoteException {
		try {
			// list all chat rooms of the user.
			_viewAdapter.listChatRooms(user.getChatRooms());
		} catch (RemoteException e) {
			System.out.println("remote exception when connecting remote user");
			e.printStackTrace();
		}
	}
	
	/**
	 * User join a chat room. This method only add the chat room into user's chat room set.
	 * @param chatRoom is the chat room the user want to join.
	 * @return return false if the chat room in the user's chat room list
	 */
	public boolean joinChatRoom(IChatRoom chatRoom) {
		return chatRooms.add(chatRoom);
	}
}
