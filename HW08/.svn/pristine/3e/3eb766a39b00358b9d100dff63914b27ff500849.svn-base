package model;

import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.function.Consumer;

import common.DataPacketAlgoCmd;
import common.DataPacketChatRoom;
import common.IChatRoom;
import common.ICmd2ModelAdapter;
import common.IUser;
import model.chatroom.ChatRoom;
import model.chatroom.ProxyChatRoom;
import model.cmd.DefaultCmd;
import model.user.AUser;
import model.user.ProxyUser;
import model.user.User;
import provided.datapacket.DataPacketAlgo;
import provided.rmiUtils.IRMIUtils;
import provided.rmiUtils.IRMI_Defs;
import provided.rmiUtils.RMIUtils;

/**
 * chat room model.
 *
 */
public class ChatRoomAppModel {
	
	private IModel2ViewAdapter _model2ViewAdapter;
	
	private Consumer<String> outputCmd = s -> ChatRoomAppModel.this._model2ViewAdapter.appendInfo((s) + "\n");
	
	private IRMIUtils rmiUtils = new RMIUtils(outputCmd);
	
	/**
	 * the local registry.
	 */
	private Registry localRegistry;
	
	/**
	 * the users on all the connected remote IPs and local IP.
	 */
	private List<IUser> users;
	
	/**
	 * the user currently using the chat room app.
	 */
	private AUser currentUser;
	
	/**
	 * the available ports on the local ip.
	 */
	private Queue<Integer> availPorts;
	
	/**
	 * the algo for data packet.
	 */
	private DataPacketAlgo<String, String> algo;
	
	
	/**
	 * constructor.
	 * @param _model2ViewAdapter the local model to view adapter.
	 */
	public ChatRoomAppModel(IModel2ViewAdapter _model2ViewAdapter) {
		this._model2ViewAdapter = _model2ViewAdapter;
		users = new ArrayList<>();
		availPorts = new LinkedList<>();
		// set the available ports number from 2101 to 2199, 
		// 2100 is the port for host.
		for (int i = 2101; i < 2200; i++) {
			availPorts.offer(i);
		}
		algo = new DataPacketAlgo<String, String>(new DefaultCmd());
	}

	/**
	 * Start the server. Create a host, export to host stub, bind the host stub to the register.
	 * add host to users list.
	 * @param userName the user name of this host.
	 * @param serverName the server name.
	 */
	public void startServer(String userName, String serverName) {
		try {
			int boundPort = getAvailPort();
			currentUser = new User(userName, _model2ViewAdapter, algo);
			IUser currentUserstub = (IUser) UnicastRemoteObject.exportObject(currentUser, boundPort);
			localRegistry.bind(serverName, currentUserstub);
			_model2ViewAdapter.appendInfo("Host bound to " + serverName + " resigter \n");
		} catch (Exception e) {
			System.err.println("Host exception" + "\n");
			e.printStackTrace();
			System.exit(-1);
		}
	}
	
	/**
	 * get one available port.
	 * @return a port number.
	 */
	private int getAvailPort() {
		if (availPorts.isEmpty()) {
			throw new IndexOutOfBoundsException("no available port.");
		}
		return availPorts.poll();
	}

	/**
	 * Connect to a IP. List all the 
	 * @param ipAddress the remote ip address.
	 */
	public void connectToIP(String ipAddress) {
		try {
			// get the remote registry.
			_model2ViewAdapter.appendInfo("Locating registry at " + ipAddress +"...\n");
			Registry remoteRegistry = rmiUtils.getRemoteRegistry(ipAddress);
			System.out.println("obtained remote resigtry");
			_model2ViewAdapter.appendInfo("Found registry : " + remoteRegistry + "\n");
			String[] hostNames = remoteRegistry.list();
			for (String hostName: hostNames) {
				IUser host = (IUser) remoteRegistry.lookup(hostName);
				users.add(new ProxyUser(host));
				_model2ViewAdapter.appendInfo("Found userstub: " + host + "\n");
			}
			System.out.println("obtained remote user stub");
			_model2ViewAdapter.listConnectedUsers(users);
			
		} catch (Exception e) {
			_model2ViewAdapter.appendInfo("Error connecting to " + ipAddress + ": " + e + "\n");
			e.printStackTrace();
		}
	}

	/**
	 * invite a user to a chat room.
	 * @param user the user to invite.
	 */
	public void inviteUser(IUser user) {
		// TODO Auto-generated method stub
	}

	/**
	 * request a list of chat rooms created by host.
	 * @param user a user.
	 */
	public void requestChatRooms(IUser user) {
		try {
			currentUser.connect(user);
		} catch (Exception e) {
			System.out.println("Error listing chat rooms on host " + user + ": " + e + "\n");
			e.printStackTrace();
		}
	}

	/**
	 * Create a Chat Room..
	 * add chatRoom to currentUser's chatRooms list.
	 * @param chatRoomName The name of the chat room.
	 * @return The created chat room object
	 */
	public IChatRoom makeChatRoom(String chatRoomName) {
		try {
			// chat room proxy, although may be unnecessary.
			IChatRoom chatRoom = new ProxyChatRoom(new ChatRoom(chatRoomName));
			currentUser.joinChatRoom(chatRoom, getAvailPort());
			// TODO miniMVC
			_model2ViewAdapter.createChatRoomComponent(chatRoom, chatRoomName);
			return chatRoom;
		} catch (Exception e) {
			System.err.println("Chat Room exception" + "\n");
			e.printStackTrace();
			System.exit(-1);
			return null;
		}
	}
	
	/**
	 * local host join a chat room.
	 * @param chatRoom a chat room.
	 */
	public void joinChatRoom(IChatRoom chatRoom) {
		currentUser.joinChatRoom(chatRoom, getAvailPort());
		_model2ViewAdapter.createChatRoomComponent(chatRoom, chatRoom.getName());
	}
	
	/**
	 * exit a chat room.
	 * @param chatRoom the chat room to exit.
	 */
	public void exitChatRoom(IChatRoom chatRoom) {
		// TODO Auto-generated method stub
		
	}

	/**
	 * the local user send text to chatRoom.
	 * @param text the text to send the chat room.
	 * @param chatRoom the chat room to send text.
	 */
	public void sendText(String text, IChatRoom chatRoom) {
		chatRoom.sendPacket(new DataPacketChatRoom<String>(String.class, text, currentUser));
	}
	
	/**
	 * start the model, start RMI.
	 */
	public void start() {
		_model2ViewAdapter.appendInfo("starting RMI... \n");
		rmiUtils.startRMI(IRMI_Defs.CLASS_SERVER_PORT_SERVER);
		_model2ViewAdapter.appendInfo("Looking for registry... \n");
		localRegistry = rmiUtils.getLocalRegistry();
		_model2ViewAdapter.appendInfo("Found registry: " + localRegistry + "\n");
	}
	
	/**
	 * exit the program.
	 */
	public void exit() {
		System.out.println("rmiUtils.stopRMI(): server is quitting");
		try {
			rmiUtils.stopRMI();
		}catch(Exception e) {
			System.err.println("rmiUtils.stopRMI(): Error when stopping server: "+ e);
			e.printStackTrace();
		}
		System.exit(0);
	}
}
