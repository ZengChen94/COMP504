package model;

import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;

import common.IChatRoom;
import common.IUser;
import model.algo.DataPacketChatRoomAlgo;
import model.chatroom.ChatRoom;
import model.cmd.DefaultCmd;
import model.user.ProxyUser;
import model.user.User;
import provided.rmiUtils.IRMIUtils;
import provided.rmiUtils.IRMI_Defs;
import provided.rmiUtils.RMIUtils;

/**
 * chat room model.
 *
 */
public class MainModel {
	
	private IMainModel2ViewAdapter _mainViewAdapter;
	private Map<IChatRoom, IMainModel2ChatRoomMVCAdapter> chatRoomViewAdaptersMap;
	
	private Consumer<String> outputCmd = s -> MainModel.this._mainViewAdapter.appendInfo((s) + "\n");
	private IRMIUtils rmiUtils = new RMIUtils(outputCmd);
	private Registry localRegistry;
	
	private List<IUser> users; // the users on all the connected remote IPs.
	private User currentUser;
	private DataPacketChatRoomAlgo algo;
	
	/**
	 * constructor.
	 * @param _mainViewAdapter the local model to view adapter.
	 */
	public MainModel(IMainModel2ViewAdapter _mainViewAdapter) {
		this._mainViewAdapter = _mainViewAdapter;
		this.chatRoomViewAdaptersMap = new HashMap<IChatRoom, IMainModel2ChatRoomMVCAdapter>();
		users = new ArrayList<>();
		algo = new DataPacketChatRoomAlgo(new DefaultCmd<>());
	}

	/**
	 * Start the server. Create a user, export to user stub, bind the user stub to the register.
	 * @param userName the user name of this host.
	 */
	public void startServer(String userName) {
		try {
			currentUser = new User(userName, _mainViewAdapter, algo);
			IUser currentUserstub = (IUser) UnicastRemoteObject.exportObject(currentUser, IUser.BOUND_PORT);
			localRegistry.bind(IUser.BOUND_NAME, currentUserstub);
			_mainViewAdapter.appendInfo("User bound to " + IUser.BOUND_NAME + " resigter on port " + IUser.BOUND_PORT + " \n");
		} catch (Exception e) {
			System.err.println("Host exception" + "\n");
			e.printStackTrace();
			System.exit(-1);
		}
	}

	/**
	 * Connect to a IP. List all the 
	 * @param ipAddress the remote ip address.
	 */
	public void connectToIP(String ipAddress) {
		try {
			// get the remote registry.
			_mainViewAdapter.appendInfo("Locating registry at " + ipAddress +"...\n");
			Registry remoteRegistry = rmiUtils.getRemoteRegistry(ipAddress);
			System.out.println("obtained remote resigtry");
			_mainViewAdapter.appendInfo("Found registry : " + remoteRegistry + "\n");
			String[] hostNames = remoteRegistry.list();
			for (String hostName: hostNames) {
				IUser host = (IUser) remoteRegistry.lookup(hostName);
				users.add(new ProxyUser(host));
				_mainViewAdapter.appendInfo("Found userstub: " + host + "\n");
			}
			System.out.println("obtained remote user stub");
			_mainViewAdapter.listConnectedUsers(users);
			
		} catch (Exception e) {
			_mainViewAdapter.appendInfo("Error connecting to " + ipAddress + ": " + e + "\n");
			e.printStackTrace();
		}
	}

	/**
	 * invite a user to a chat room.
	 * @param user the user to invite.
	 */
	public void inviteUser(IUser user) {
		// TODO Auto-generated method stub
	}

	/**
	 * request a list of chat rooms created by host.
	 * @param user a user.
	 */
	public void requestChatRooms(IUser user) {
		try {
			currentUser.connect(user);
		} catch (Exception e) {
			System.out.println("Error listing chat rooms on host " + user + ": " + e + "\n");
			e.printStackTrace();
		}
	}

	/**
	 * Create a Chat Room..
	 * add chatRoom to currentUser's chatRooms list.
	 * @param chatRoomName The name of the chat room.
	 * @return The created chat room object
	 */
	public IChatRoom makeChatRoom(String chatRoomName) {
		try {
			IChatRoom chatRoom = new ChatRoom(chatRoomName);
			joinChatRoom(chatRoom);
			return chatRoom;
		} catch (Exception e) {
			System.err.println("Chat Room exception" + "\n");
			e.printStackTrace();
			System.exit(-1);
			// TODO return null IChatRoom
			return null;
		}
	}
	
	/**
	 * local host join a chat room.
	 * @param chatRoom a chat room.
	 */
	public void joinChatRoom(IChatRoom chatRoom) {
		currentUser.joinChatRoom(chatRoom);
		chatRoomViewAdaptersMap.put(chatRoom, _mainViewAdapter.createChatRoomMVC(currentUser, chatRoom));
		_mainViewAdapter.appendInfo("successfully joined the chat room: " + chatRoom);
	}
		
	/**
	 * exit a chat room.
	 * @param chatRoom the chat room to exit.
	 */
	public void exitChatRoom(IChatRoom chatRoom) {
		// TODO Auto-generated method stub
	}
	
	/**
	 * start the model, start RMI.
	 */
	public void start() {
		_mainViewAdapter.appendInfo("starting RMI... \n");
		rmiUtils.startRMI(IRMI_Defs.CLASS_SERVER_PORT_SERVER);
		_mainViewAdapter.appendInfo("Looking for registry... \n");
		localRegistry = rmiUtils.getLocalRegistry();
		_mainViewAdapter.appendInfo("Found registry: " + localRegistry + "\n");
	}
	
	/**
	 * exit the program.
	 */
	public void exit() {
		System.out.println("rmiUtils.stopRMI(): server is quitting");
		try {
			rmiUtils.stopRMI();
		}catch(Exception e) {
			System.err.println("rmiUtils.stopRMI(): Error when stopping server: "+ e);
			e.printStackTrace();
		}
		System.exit(0);
	}

	/**
	 * Get the algo for execute data packet from main model.
	 * @return the algo for execute data packet.
	 */
	public DataPacketChatRoomAlgo getAlgo() {
		return algo;
	}
}
