package model;

import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.function.Consumer;

import javax.swing.JTextField;

import provided.rmiUtils.IRMIUtils;
import provided.rmiUtils.IRMI_Defs;
import provided.rmiUtils.RMIUtils;

public class ChatRoomAppModel {
	
	private IModel2ViewAdapter _model2ViewAdapter;
	
	private Consumer<String> outputCmd = s -> ChatRoomAppModel.this._model2ViewAdapter.appendInfo((s) + "\n");
	
	private IRMIUtils rmiUtils = new RMIUtils(outputCmd);
	
	private Registry registry;
	
	private Host host;
	private List<ChatRoom> chatRooms;
	private Queue<Integer> availPorts;
	
	
	/**
	 * constructor.
	 * @param _model2ViewAdapter the local model to view adapter.
	 */
	public ChatRoomAppModel(IModel2ViewAdapter _model2ViewAdapter) {
		this._model2ViewAdapter = _model2ViewAdapter;
		chatRooms = new ArrayList<>();
		availPorts = new LinkedList<>();
		// set the available ports number from 2101 to 2199, 
		// 2100 is the port for host.
		for (int i = 2101; i < 2200; i++) {
			availPorts.offer(i);
		}
	}

	/**
	 * Start the server. Create a host, export to host stub. Get local register, bind the host stub to the register.
	 * @param userName the user name of this host.
	 * @param serverName the server name.
	 */
	public void startServer(String userName, String serverName) {
		
		try {
			// create the Host server object.
			host = new Host();
			// create Host stub from Host server object.
			IHost hostStub = (IHost) UnicastRemoteObject.exportObject(host, IHost.BOUND_PORT);
			// bind the Host stub to the local registry.
			registry.rebind(IHost.BOUND_NAME, hostStub);
			_model2ViewAdapter.appendInfo("Host bound to " + IHost.BOUND_NAME + " resigter \n");

		}catch (Exception e) {
			System.err.println("Host exception" + "\n");
			e.printStackTrace();
			System.exit(-1);
		}

		_model2ViewAdapter.appendInfo("Waiting..." + "\n");
	}

	public void makeChatRoom(String chatRoomName) {
		if (availPorts.isEmpty()) {
			_model2ViewAdapter.appendInfo("created too many chat rooms, not available port numbers.\n");
			return;
		}
		int boundPort = availPorts.poll();
		ChatRoom chatRoom = new ChatRoom(chatRoomName, boundPort);
		try {
			AChatRoom chatRoomStub = (AChatRoom) UnicastRemoteObject.exportObject(chatRoom, boundPort);
			registry.rebind(chatRoomName, chatRoomStub);
			_model2ViewAdapter.appendInfo("Chat Room bound to " + chatRoomName + " resigter \n");

		} catch (Exception e) {
			System.err.println("Chat Room exception" + "\n");
			e.printStackTrace();
			System.exit(-1);
		}
		chatRooms.add(chatRoom);
	}

	public void connectToIP(JTextField ipAddress) {
		// TODO Auto-generated method stub
	}

	public void inviteUser(Host host) {
		// TODO Auto-generated method stub
		
	}

	public void joinChatRoom(Host chatRoom) {
		// TODO Auto-generated method stub
		
	}

	public void exit() {
		// TODO Auto-generated method stub
		
	}

	public void exitChatRoom(ChatRoom chatRoom) {
		// TODO Auto-generated method stub
		
	}

	public void sendText(String text) {
		// TODO Auto-generated method stub
		
	}

	/**
	 * start the model, start RMI.
	 */
	public void start() {
		_model2ViewAdapter.appendInfo("starting RMI... \n");
		rmiUtils.startRMI(IRMI_Defs.CLASS_SERVER_PORT_SERVER);
		_model2ViewAdapter.appendInfo("Looking for registry... \n");
		registry = rmiUtils.getLocalRegistry();
		_model2ViewAdapter.appendInfo("Found registry: " + registry + "\n");
	}

}
