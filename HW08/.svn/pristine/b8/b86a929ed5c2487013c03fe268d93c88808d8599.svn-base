package model.receiver;

import java.io.Serializable;
import java.rmi.RemoteException;
import java.util.UUID;

import common.DataPacketAlgoCmd;
import common.DataPacketChatRoom;
import common.ICmd2ModelAdapter;
import common.IReceiver;
import common.IUser;
import model.algo.DataPacketChatRoomAlgo;
import model.cmd.DefaultCmd;

/**
 * The receiver for a chat room.
 *
 */
public class Receiver implements IReceiver, Serializable {
		
	/**
	 * 
	 */
	private static final long serialVersionUID = -80343119221410606L;
	private IUser user;
	private UUID uuid = UUID.randomUUID();
	/**
	 * the receiver to chat room model adapter.
	 */
	private transient ICmd2ModelAdapter cmd2ModelAdapter;
	
	private DataPacketChatRoomAlgo algo = new DataPacketChatRoomAlgo(new DefaultCmd<>(cmd2ModelAdapter), cmd2ModelAdapter);
	
	/**
	 * Constructor.
	 * @param user is the user of this receiver.
	 * @param cmd2ModelAdapter is the receiver to chat room model adapter.
	 */
	public Receiver(IUser user, ICmd2ModelAdapter cmd2ModelAdapter) {
		this.user = user;
		this.cmd2ModelAdapter = cmd2ModelAdapter;
	}

	@Override
	public <T> DataPacketChatRoom<Object> receive(DataPacketChatRoom<T> data) throws RemoteException {
		Class<?> id = data.getData().getClass();
		IReceiver sender = data.getSender();
		System.out.println("id class" + id);
		System.out.println("sender(receiver) " + sender);
		DataPacketAlgoCmd<?> cmd = this.getCmd(id);
		if (cmd == null) {
			System.out.println("missing cmd ?!");
			cmd = sender.getCmd(id);
			cmd = cmd == null ? new DefaultCmd<T>(cmd2ModelAdapter) : cmd;
		}
		cmd.setCmd2ModelAdpt(cmd2ModelAdapter);
		algo.setCmd(id, cmd);
		Object result = data.execute(algo);
		return new DataPacketChatRoom<Object>(Object.class, result, sender);
	}
	
	@Override
	public <T> DataPacketAlgoCmd<T> getCmd(Class<T> id) {
		return (DataPacketAlgoCmd<T>) algo.getCmd(id);
	}

	@Override
	public IUser getUserStub() throws RemoteException {
		return user;
	}

	@Override
	public UUID getUUID() throws RemoteException {
		return uuid;
	}
}
