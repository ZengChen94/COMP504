package model;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Point;
import java.util.Observable;
import java.util.Observer;

import model.strategy.IUpdateStrategy;

public class Ball implements Observer {
	/**
	 * Location of the ball.
	 */
	protected Point location;

	/**
	 * Radius of the ball.
	 */
	protected int radius;

	/**
	 * Velocity of the ball.
	 */
	protected Point velocity;

	/**
	 * Color of the ball.
	 */
	protected Color color;

	/**
	 * Canvas of the GUI.
	 */
	protected Component canvas;

	/**
	 * The update strategy of this ball.
	 */
	private IUpdateStrategy strategy;
	
	/**
	 * Initial the ABall.
	 * @param location Location of the ball.
	 * @param radius Radius of the ball.
	 * @param velocity Velocity of the ball.
	 * @param color Color of the ball.
	 * @param canvas Canvas of the GUI.
	 * @param strategy Strategy of the ball.
	 */
	public Ball(Point location, int radius, Point velocity, Color color, Component canvas, IUpdateStrategy strategy) {
		setLocation(location);
		setRadius(radius);
		setVelocity(velocity);
		setColor(color);
		setCanvas(canvas);
		setStrategy(strategy);
	}

	/**
	 * Set the location of the ball
	 * @param location Location of the ball.
	 */
	public void setLocation(Point location) {
		this.location = location;
	}

	/**
	 * Set the radius of the ball
	 * @param radius Radius of the ball.
	 */
	public void setRadius(int radius) {
		this.radius = radius;
	}

	/**
	 * Set the velocity of the ball
	 * @param velocity Velocity of the ball.
	 */
	public void setVelocity(Point velocity) {
		this.velocity = velocity;
	}

	/**
	 * Set the color of the ball
	 * @param color Color of the ball.
	 */
	public void setColor(Color color) {
		this.color = color;
	}

	/**
	 * Set the canvas of the GUI
	 * @param canvas Canvas of the GUI.
	 */
	public void setCanvas(Component canvas) {
		this.canvas = canvas;
	}
	
	/**
	 * Get the strategy of this Ball.
	 * @param strategy The strategy of this Ball.
	 */
	public void setStrategy(IUpdateStrategy strategy) {
		this.strategy = strategy;
	}
	
	/**
	 * Get the location of the ball
	 * @return location Location of the ball.
	 */
	public Point getLocation() {
		return this.location;
	}

	/**
	 * Get the radius of the ball
	 * @return radius Radius of the ball.
	 */
	public int getRadius() {
		return this.radius;
	}

	/**
	 * Get the velocity of the ball
	 * @return velocity Velocity of the ball.
	 */
	public Point getVelocity() {
		return this.velocity;
	}

	/**
	 * Get the color of the ball
	 * @return color Color of the ball.
	 */
	public Color getColor() {
		return this.color;
	}

	/**
	 * Get the canvas of the GUI
	 * @return canvas Canvas of the GUI.
	 */
	public Component getCanvas() {
		return this.canvas;
	}

	/**
	 * Get the strategy of this Ball.
	 * @return The strategy of this Ball.
	 */
	public IUpdateStrategy getStrategy() {
		return strategy;
	}

	/**
	 * Paint the canvas.
	 * @param g Graphics g
	 */
	public void paint(Graphics g) {
		g.setColor(getColor());
		g.fillOval(location.x - radius, location.y - radius, radius * 2, radius * 2);
	}

	/**
	 * Move the ball.
	 */
	public void move() {
		location.x += velocity.x;
		location.y += velocity.y;
	}

	/**
	 * Bounce the ball.
	 */
	public void bounce() {
		while (this.location.x - this.radius < 0 || this.location.x + this.radius > this.canvas.getWidth()
				|| this.location.y - this.radius < 0 || this.location.y + this.radius > this.canvas.getHeight()) {
			//hit left
			if (this.location.x - this.radius < 0) {
				this.getVelocity().x = -this.getVelocity().x;
				/*The position of the ball (perpendicular to the wall) where it would just barely contact the wall, 
				is the average of (i.e. halfway between) the current perpendicular position and the position of where the ball should be, 
				had it actually bounced off the wall. */
				this.location.x = 2 * this.radius - this.location.x;
			}
			//hit right
			if (this.location.x + this.radius > this.canvas.getWidth()) {
				this.getVelocity().x = -this.getVelocity().x;
				this.location.x = 2 * (this.canvas.getWidth() - this.radius) - this.location.x;
			}
			//hit top
			if (this.location.y - this.radius < 0) {
				this.getVelocity().y = -this.getVelocity().y;
				this.location.y = 2 * this.radius - this.location.y;
			}
			//hit bottom
			if (this.location.y + this.radius > this.canvas.getHeight()) {
				this.getVelocity().y = -this.getVelocity().y;
				this.location.y = 2 * (this.canvas.getHeight() - this.radius) - this.location.y;
			}
		}
	}

	/**
	 * Override the method of Observer.
	 * @param arg Graphics.
	 */
	@Override
	public void update(Observable o, Object arg) {
		strategy.updateState(this);
		move();
		bounce();
		paint((Graphics) arg);
	}
}
