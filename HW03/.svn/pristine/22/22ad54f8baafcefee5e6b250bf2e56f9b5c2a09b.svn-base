package model.balls;

import java.awt.Color;
import java.awt.Component;
import java.awt.Point;

/**
 * Following is a class defining what a disappear ball is
 * 
 * @author wq3
 * @author ker7
 */
public class ADisappearBall extends ABall {

	/**
	 * Counter for keeping track of how long a ball stays invisible
	 **/
	private int counter = 0;

	/**
	 * Field for maintaining the initial color of the ball even after re-appearing
	 **/
	private Color first;

	/**
	 * Constructor of the Disappearing Ball
	 * 
	 * @param startLoc The beginning location of the ball, generated randomly based on the canvas's size
	 * @param startRadius The beginning radius of the ball, generated randomly from 10 to 20 pixels
	 * @param startVel The beginning velocity of the ball, generated randomly from a rectangle (0,0,10,25)
	 * @param startColor The beginning color of the ball, generated randomly
	 * @param theCanvas The canvas that the ball (and all other balls) is being drawn on
	 */
	public ADisappearBall(Point startLoc, int startRadius, Point startVel, Color startColor, Component theCanvas) {
		super(startLoc, startRadius, startVel, startColor, theCanvas);
		first = startColor;
	}

	/**
	 * Method to control the ball disappearing and re-appearing
	 * Changels color and alpha to make ball seem briefly invisible, then brings it back.
	 */
	@Override
	public void variant() {
		counter++;
		color = first;
		if (counter >= 20) {
			color = new Color(240, 240, 240, 0);
			if (counter >= 40) {
				counter = 0;
			}
		}

	}

}
