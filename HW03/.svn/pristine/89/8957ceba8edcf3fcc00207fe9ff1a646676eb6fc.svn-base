package view;

import java.awt.BorderLayout;
import java.awt.Graphics;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.Color;
import java.awt.Component;

import javax.swing.JButton;
import javax.swing.JTextField;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.GridLayout;
import javax.swing.JComboBox;

/**
 * Following is the class for the main frame of the application that extends JFrame.
 * This is the view that will be used for displaying the BallWorld Content to the user
 * 
 * @author wq3
 * @author ker7
 */
public class MainAppFrame extends JFrame {
	/**
	 * ID auto generated by Eclipse to be used as a unique class identifier for serialization and de-serialization.
	 * Added to fix the class serialVersionUID warning
	 */
	private static final long serialVersionUID = 1057458952401270427L;

	/**
	 * The entire main panel of the main frame of the application
	 */
	private JPanel contentPane;

	/**
	 * The north panel of the application
	 * Houses the buttons to control the application as well as the text field for taking user input
	 */
	private final JPanel pnlNorth = new JPanel();

	/**
	 * Button to create a ball of a user-provided type
	 */
	private final JButton btnMakeBall = new JButton("Make Ball");

	/**
	 * Button to clear all balls from the canvas
	 */
	private final JButton btnClearBalls = new JButton("Clear Balls");

	/**
	 * Text field used to allow the user to specify what kind of balls to make
	 */
	private final JTextField txtfEnterBallClass = new JTextField();

	/**
	 * Adapter object for allowing the view to communicate with the model for the control actions
	 */
	private IModelCtrlAdapter _view2ModelCtrlAdpt = IModelCtrlAdapter.NULL_OBJECT;

	/**
	 * Adapter object for allowing the view to communicate with the model for the paint actions
	 */
	private IModelPaintAdapter _view2ModelPaintAdpt = IModelPaintAdapter.NULL_OBJECT;

	/**
	 * JPanel that will be painted on when running the application for new balls
	 * Overridden paint component with modified behavior to support the application
	 */
	private final JPanel pnlCenter = new JPanel() {
		/**
		 * ID auto generated by Eclipse to be used as a unique class identifier for serialization and de-serialization.
		 * Added to fix the class serialVersionUID warning
		 */
		private static final long serialVersionUID = 2175232765305712810L;

		/**
		 * Overridden paint component
		 * 
		 * @param g Graphics object allowing painting on components
		 */
		public void paintComponent(Graphics g) {
			super.paintComponent(g);
			_view2ModelPaintAdpt.paintBalls(g);
		}
	};
	private final JPanel panel = new JPanel();
	private final JPanel panel_1 = new JPanel();
	private final JPanel panel_2 = new JPanel();
	private final JPanel panel_3 = new JPanel();
	private final JButton btnAddToList = new JButton("Add to List!");
	private final JComboBox comboBox = new JComboBox();
	private final JComboBox comboBox_1 = new JComboBox();
	private final JButton btnNewButton = new JButton("New button");
	private final JButton btnNewButton_1 = new JButton("New button");
	private final JButton btnNewButton_2 = new JButton("New button");

	/**
	 * Constructor for the main frame of the application
	 * It is supplied with an instance of the model adapter for controlling and painting
	 * 
	 * @param _view2ModelPaint The adapter for allowing the view to communicate with the model for painting
	 * @param _view2ModelCtrl The adapter for allowing the view to communicate with the model for controlling the application
	 */
	public MainAppFrame(IModelPaintAdapter _view2ModelPaint, IModelCtrlAdapter _view2ModelCtrl) {
		initGUI();
		_view2ModelPaintAdpt = _view2ModelPaint;
		_view2ModelCtrlAdpt = _view2ModelCtrl;
	}

	/**
	 * GUI initialization method for this application
	 */
	private void initGUI() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 500, 400);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(0, 0, 0, 0));
		contentPane.setLayout(new BorderLayout(0, 0));
		setContentPane(contentPane);
		pnlNorth.setBackground(Color.BLACK);

		contentPane.add(pnlNorth, BorderLayout.NORTH);
		
		pnlNorth.add(panel);
		panel.setLayout(new GridLayout(0, 1, 0, 0));
		panel.add(txtfEnterBallClass);
		txtfEnterBallClass.setToolTipText("Text field to enter ball class");
		txtfEnterBallClass.setText("model.balls.AStraightBall");
		txtfEnterBallClass.setColumns(10);
		
		panel.add(btnAddToList);
		
		pnlNorth.add(panel_1);
		panel_1.setLayout(new GridLayout(0, 1, 0, 0));
		panel_1.add(btnMakeBall);
		btnMakeBall.setToolTipText("Press to create a new Ball");
		btnMakeBall.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				_view2ModelCtrlAdpt.loadBall(txtfEnterBallClass.getText());
			}
		});
		
		panel_1.add(comboBox_1);
		
		panel_1.add(comboBox);
		
		panel_1.add(btnNewButton);
		
		pnlNorth.add(panel_2);
		panel_2.setLayout(new GridLayout(0, 1, 0, 0));
		
		panel_2.add(btnNewButton_2);
		
		panel_2.add(btnNewButton_1);
		
		pnlNorth.add(panel_3);
		panel_3.setLayout(new GridLayout(0, 1, 0, 0));
		panel_3.add(btnClearBalls);
		btnClearBalls.setToolTipText("Press to Clear all Balls");
		btnClearBalls.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				_view2ModelCtrlAdpt.clearBalls();
			}
		});
		pnlCenter.setToolTipText("Display Canvas for all Balls");

		contentPane.add(pnlCenter, BorderLayout.CENTER);
	}

	/**
	 * Used to separate the application starting from the GUI starting.
	 * Carries out all of the steps of starting up the GUI (e.g. setting visible to true).
	 */
	public void start() {
		setVisible(true);
	}

	/**
	 * Used to get the current canvas being drawn to
	 * 
	 * @return Returns the Canvas being drawn to in the form of a component (the center panel)
	 */
	public Component getCanvas() {
		return pnlCenter;
	}

	/**
	 * The update utilized to update the current view
	 * Repaints the center Panel to see changes
	 */
	public void update() {
		pnlCenter.repaint();
	}
}