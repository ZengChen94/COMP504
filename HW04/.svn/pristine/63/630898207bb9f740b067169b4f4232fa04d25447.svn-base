package model.paint;

import java.awt.Graphics;
import java.awt.geom.AffineTransform;

import model.CBall;

/**
 * Concrete paint strategy that cycles through a sequence of paint strategies,
 * painting one per paint update. 
 * Note: This paint strategy cannot be directly instantiated by the 
 * BallWorld system because it does not have a no-parameter constructor.
 * 
 * @author Yue Pan
 * @author Chen Zeng
 * @version 1.0
 */
public class AnimatePaintStrategy extends APaintStrategy {

	/**
	 * The counter that keeps track of which paint strategy to use next.
	 */
	private int count = 0;
	
	/**
	 * The paint strategies to cycle through.
	 */
	private APaintStrategy[] paintStrats;
	
	/**
	 * Constructor that instantiates an AffineTransform for internal use.
	 * @param pstrats vararg input of the paint strategies to cycle through, in order.
	 */
	public AnimatePaintStrategy(APaintStrategy... pstrats) {
		this(new AffineTransform(), pstrats);
	}
	
	/**
	 * Constructor that uses the supplied AffineTransform for internal use.
	 * @param at The AffineTransform to use.
	 * @param pstrats vararg input of the paint strategies to cycle through, in order.
	 */
	public AnimatePaintStrategy(AffineTransform at, APaintStrategy... pstrats){
		super(at);
		this.paintStrats = pstrats;
	}

	/**
	 * Paints the currently indexed paint strategy on the given Graphics context 
	 * using the supplied AffineTransform.
	 * @param g The Graphics object used to paint.
	 * @param host The host is used.
	 * @param at The AffineTransform is used.
	 */
	@Override
	public void paintXfrm(Graphics g, CBall host, AffineTransform at) {
		paintStrats[count++].paintXfrm(g, host, at);
        if (count == paintStrats.length) {
            count = 0;
        }
	}

}
