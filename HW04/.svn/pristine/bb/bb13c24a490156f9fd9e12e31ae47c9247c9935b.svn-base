package model;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import javax.swing.Timer;

import util.Dispatcher;
import util.Randomizer;
import strategy.MultiStrategy;
import strategy.SwitcherStrategy;

/**
 * The Ball model class
 * @author Yue Pan
 * @author Zihan Wang
 * @version 1.0
 *
 */
public class BallModel {
	/**
	 * The model to view adapter
	 * link: https://canvas.rice.edu/courses/6768/modules/items/82366
	 * The NULL_OBJECT insures that the adapter is always valid
	 */
	private IModel2ViewAdapter _model2ViewApt = IModel2ViewAdapter.NULL_OBJECT;

	/**
	 * The Dispatcher of this BallModel. Add and remove balls.
	 */
	private Dispatcher myDispatcher = new Dispatcher();

	/**
	 * BallModel Constructor 
	 * @param model2ViewApt is the adapter from model to view
	 */

	public BallModel(IModel2ViewAdapter model2ViewApt) {
		this._model2ViewApt = model2ViewApt;
	}

	/**
	 * The update time interval
	 */
	private int _timeSlice = 50;

	/**
	 * The timer
	 * The timer "ticks" by calling this method every _timeslice milliseconds
	 */
	private Timer _timer = new Timer(_timeSlice, (e) -> _model2ViewApt.repaint());

	/**
	 * Start the timer
	 */
	public void start() {
		_timer.start();
	}

	/**
	 * New strategy switcher objecj
	 */
	private SwitcherStrategy switcher = new SwitcherStrategy();

	/**
	 * The following function in the loadBall(String) reference to
	 * "https://www.clear.rice.edu/comp310/JavaResources/dynamic_class_load.html", 
	 * 
	 * The method creates an instance of an ABall, given a fully qualified class name (package.classname) of
	 * a subclass of ABall.
	 * The method assumes that there is only one constructor for the supplied class that has the same *number* of
	 * input parameters as specified in the args array and that it conforms to a specific
	 * signature, i.e. specific order and types of input parameters in the args array.
	 * @param className A string that is the fully qualified class name of the desired object
	 * @return An IUpdateStrategy of the supplied classname. 
	 */
	public IUpdateStrategy loadStrategy(String className) {
		try {

			Object[] args = new Object[] {};
			java.lang.reflect.Constructor<?> cs[] = Class.forName(className).getConstructors(); // get all the constructors
			java.lang.reflect.Constructor<?> c = null;
			for (int i = 0; i < cs.length; i++) { // find the first constructor with the right number of input parameters
				if (args.length == (cs[i]).getParameterCount()) {
					c = cs[i];
					break;
				}
			}
			return (IUpdateStrategy) c.newInstance(args);
		} catch (Exception ex) {
			System.err.println("Class " + className + " failed to load. \nException = \n" + ex);
			ex.printStackTrace(); // print the stack trace to help in debugging
			return _errorStrategyFac.make();
		}
	}

	/**
	 * This method add an ABall instance which loaded by the loadBall 
	 * Send it to the dispatcher
	 * @param ballname is the type of the ball to be created.
	 */
	public void loadBall(IUpdateStrategy ballname) {
		int Radius = Randomizer.Singleton.randomInt(10, 40);
		Color color = Randomizer.Singleton.randomColor();
		Component canvas = _model2ViewApt.getCanvas();
		Point loc = Randomizer.Singleton.randomLoc(canvas.getSize());
		Point vel = Randomizer.Singleton.randomVel(new Rectangle(5, 5, 30, 30));
		CBall ball = new CBall(loc, Radius, vel, color, canvas, ballname);
		myDispatcher.addObserver(ball);
	}

	/**
	 * Clear all the balls on pnl
	 */
	public void clear() {
		myDispatcher.deleteObservers();
	}

	/**
	 * This is the method that is called by the view's adapter to the model, i.e. is called by IView2ModelAdapter.paint().
	 * This method will update the sprites's painted locations by painting all the sprites
	 * onto the given Graphics object.
	 * @param g The Graphics object from the view's paintComponent() call.
	 */
	public void update(Graphics g) {
		myDispatcher.notifyAll(g); // The Graphics object is being given to all the sprites (Observers)
	}

	/**
	 * Returns an IStrategyFac that can instantiate the strategy specified by
	 * classname. Returns a factory for a beeping error strategy if classname is null. 
	 * The toString() of the returned factory is the classname.
	 * 
	 * @param classname  Shortened name of desired strategy
	 * @return A factory to make that strategy
	 */
	public IStrategyFac makeStrategyFac(final String classname) {
		if (null == classname)
			return _errorStrategyFac;
		return new IStrategyFac() {
			/**
			 * Instantiate a strategy corresponding to the given class name.
			 * @return An IUpdateStrategy instance
			 */
			public IUpdateStrategy make() {
				return loadStrategy(fixName(classname));
			}

			/**
			 * Return the given class name string
			 */
			public String toString() {
				return classname;
			}
		};
	}

	/**
	 * Returns an IStrategyFac that can instantiate a MultiStrategy with the two
	 * strategies made by the two given IStrategyFac objects. Returns null if
	 * either supplied factory is null. The toString() of the returned factory
	 * is the toString()'s of the two given factories, concatenated with "-". 
	 * If either factory is null, then a factory for a beeping error strategy is returned.
	 * 
	 * @param stratFac1 An IStrategyFac for a strategy
	 * @param stratFac2 An IStrategyFac for a strategy
	 * @return An IStrategyFac for the composition of the two strategies
	 */
	public IStrategyFac combineStrategyFacs(final IStrategyFac stratFac1, final IStrategyFac stratFac2) {
		if (null == stratFac1 || null == stratFac2)
			return _errorStrategyFac;
		return new IStrategyFac() {
			/**
			 * Instantiate a new MultiStrategy with the strategies from the given strategy factories
			 * @return A MultiStrategy instance
			 */
			public IUpdateStrategy make() {
				return new MultiStrategy(stratFac1.make(), stratFac2.make());
			}

			/**
			 * Return a string that is the toString()'s of the given strategy factories concatenated with a "-"
			 */
			public String toString() {
				return stratFac1.toString() + "-" + stratFac2.toString();
			}
		};
	}

	/**
	 * Private method is used to save the user's typing by converting the abbreviated strategy class name
	 * into it's fully qualified form
	 * @param classname The abbreviated strategy class name.
	 * @return The fully qualified form of strategy name.
	 */
	private String fixName(String classname) {
		return "strategy." + classname + "Strategy";
	}

	/**
	 * A factory for a beeping error strategy that beeps the speaker every 25 updates.
	 * Either use the _errorStrategyFac variable directly if you need a factory that makes an error strategy,
	 * or call _errorStrategyFac.make() to create an instance of a beeping error strategy.
	 */
	private IStrategyFac _errorStrategyFac = new IStrategyFac() {
		@Override
		/**
		 * Make the beeping error strategy
		 * @return  An instance of a beeping error strategy
		 */
		public IUpdateStrategy make() {
			return new IUpdateStrategy() {
				private int count = 0; // update counter

				/**
				 * Beep the speaker every 25 updates
				 */
				@Override
				public void updateState(CBall context) {
					if (25 < count++) {
						java.awt.Toolkit.getDefaultToolkit().beep();
						count = 0;
					}
				}
			};
		}
	};

	/**
	 * This method return the current switch of this ball
	 * @return switcher is the updated state of this ball
	 */
	public SwitcherStrategy getSwStrategy() {
		return switcher;
	}

	/**
	 * Sets the new strategy for the ball
	 * @param Nstrategy Strategy for switcher
	 */
	public void setSwitcherStrategy(IUpdateStrategy Nstrategy) {
		switcher.setNew(Nstrategy);
	}

}
