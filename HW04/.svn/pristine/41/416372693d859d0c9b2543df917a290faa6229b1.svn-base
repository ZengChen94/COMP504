package model.paint.strategy;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D.Double;

import model.CBall;
import model.IPaintStrategy;

/**
 * Paint strategy that paints a filled circle with the Ball's radius. 
 * This functionality is duplicated by the EllipsePaintStrategy. 
 * The class demonstrates a direct implementation of IPaintStrategy.
 * 
 * @author Yue Pan
 * @author Chen Zeng
 * @version 1.0
 */
public class BallPaintStrategy implements IPaintStrategy {
	/**
	 * The AffineTransformed used for internal calculations.
	 */
	private AffineTransform at;
	
	/**
	 * Unit sized circle used as a prototype.
	 */
	private Double ball;

	/**
	 * No parameter constructor that creates a 1 pixel radius ball at the origin.
	 */
	public BallPaintStrategy(){
		this(new AffineTransform(), 0, 0, 1, 1);
	}
	
	/**
	 * Constructor that allows one to create the prototype ball of arbitrary dimension and location. 
	 * The AffineTransform is externally supplied.
	 * @param at The AffineTransform to use for internal calculations.
	 * @param x The floating point x-coordinate of center of circle.
	 * @param y The floating point y-coordinate of center of circle.
	 * @param width The floating point x-radius of the circle (ellipse).
	 * @param height The floating point x-radius of the circle (ellipse).
	 */
	public BallPaintStrategy(AffineTransform at, double x, double y, double width, double height){
		this.at = at;
        this.ball = new Double(x - width, y - height, 2 * width, 2 * width);
	}
	
	/**
	 * By default, do nothing for initialization.
	 * @param host The ball to initialize.
	 */
	@Override
	public void init(CBall host) {
	}

	/**
	 * Paints on the given graphics context using the color, 
	 * scale and direction provided by the host. This is done
	 * by setting up the AffineTransform to scale then translate. 
	 * Calls paintXfrm to actually perform the painting, 
	 * using the set up transform. Calls paintCfg just before 
	 * calling paintXfrm param g The Graphics context that will 
	 * be paint on param host The host Ball that the required 
	 * information will be pulled from.
	 * @param g The graphics context to draw upon.
	 * @param host The host ball.
	 */
	@Override
	public void paint(Graphics g, CBall host) {
		double scale = host.getRadius();
        at.setToTranslation(host.getLocation().getX(), host.getLocation().getY());
        at.scale(scale, scale);
        g.setColor(host.getColor());
        paintXform(g, host, at);
	}

	/**
	 * Paints a transformed circle, as per the given AffineTransform Uses 
	 * color already set in Graphics context
	 * @param g The Graphics context to paint on.
	 * @param host The Ball host.
	 * @param at The AffineTransform to use.
	 */
	public void paintXform(Graphics g, CBall host, AffineTransform at){
		((Graphics2D)g).fill(at.createTransformedShape(ball));
	}
	
}
