package model.strategy;

import java.awt.Point;

import model.Ball;
import model.IBallCmd;
import model.IUpdateStrategy;
import model.MultiInteractStrategy;
import util.IDispatcher;
import util.Randomizer;

// Or, using lambda expressions:
public class BlackholeStrategy<TDispMsg> implements IUpdateStrategy<TDispMsg> {

	public void init(Ball context) {
		context.setInteractStrategy(new MultiInteractStrategy(context.getInteractStrategy(), (contextBall, targetBall, disp) -> disp.deleteObserver(targetBall)));
	}

	@SuppressWarnings("unchecked")
	@Override
	public void updateState(Ball context, IDispatcher<TDispMsg> dispatcher) {
		// No-op
		dispatcher.dispatch((TDispMsg) new IBallCmd(){
			@Override
			public void apply(Ball other, IDispatcher<IBallCmd> dispatcher) {
				if(context != other){
					double distance = context.getLocation().distance(other.getLocation());
					if (distance <= (context.getRadius()+other.getRadius())) {
						other.setLoc(new Point(0, 0));
					}
				}
			}
		});
	}
}
