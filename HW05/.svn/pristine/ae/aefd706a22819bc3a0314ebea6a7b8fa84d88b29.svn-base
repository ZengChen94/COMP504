<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (1.8.0_144) on Sat Sep 30 12:19:39 CDT 2017 -->
<title>BallModel</title>
<meta name="date" content="2017-09-30">
<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
<script type="text/javascript" src="../script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="BallModel";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../model/package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/BallModel.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev&nbsp;Class</li>
<li>Next&nbsp;Class</li>
</ul>
<ul class="navList">
<li><a href="../index.html?model/BallModel.html" target="_top">Frames</a></li>
<li><a href="BallModel.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">model</div>
<h2 title="Class BallModel" class="title">Class BallModel</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>model.BallModel</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public class <span class="typeNameLabel">BallModel</span>
extends java.lang.Object</pre>
<div class="block">The Ball model class</div>
<dl>
<dt><span class="simpleTagLabel">Version:</span></dt>
<dd>1.0</dd>
<dt><span class="simpleTagLabel">Author:</span></dt>
<dd>Ye Wang, Chen Zeng</dd>
</dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../model/BallModel.html#BallModel-model.IModel2ViewAdapter-">BallModel</a></span>(model.IModel2ViewAdapter&nbsp;model2ViewApt)</code>
<div class="block">BallModel Constructor</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#clear--">clear</a></span>()</code>
<div class="block">Clear all the balls on pnl</div>
</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>model.IStrategyFac&lt;model.IBallCmd&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#combineStrategyFacs-model.IStrategyFac-model.IStrategyFac-">combineStrategyFacs</a></span>(model.IStrategyFac&lt;model.IBallCmd&gt;&nbsp;stratFac1,
                   model.IStrategyFac&lt;model.IBallCmd&gt;&nbsp;stratFac2)</code>
<div class="block">Returns an IStrategyFac that can instantiate a MultiStrategy with the two
 strategies made by the two given IStrategyFac objects.</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>model.strategy.SwitcherStrategy&lt;model.IBallCmd&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#getSwStrategy--">getSwStrategy</a></span>()</code>
<div class="block">This method return the current switch of this ball</div>
</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#loadBall-model.IUpdateStrategy-model.IPaintStrategy-">loadBall</a></span>(model.IUpdateStrategy&lt;model.IBallCmd&gt;&nbsp;ballname,
        model.IPaintStrategy&nbsp;paint)</code>
<div class="block">This method add an ABall instance which loaded by the loadBall 
 Send it to the dispatcher</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>model.IPaintStrategy</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#loadPaint-java.lang.String-">loadPaint</a></span>(java.lang.String&nbsp;classname)</code>
<div class="block">The following function in the loadBall(String) reference to
 "https://www.clear.rice.edu/comp310/JavaResources/dynamic_class_load.html", 
 The following method returns an instance of IPaintStrategy, given the fully qualified paint class name of IPaintStrategy</div>
</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>model.IUpdateStrategy&lt;model.IBallCmd&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#loadStrategy-java.lang.String-">loadStrategy</a></span>(java.lang.String&nbsp;className)</code>
<div class="block">The following function in the loadBall(String) reference to
 "https://www.clear.rice.edu/comp310/JavaResources/dynamic_class_load.html", 
 
 The method creates an instance of an ABall, given a fully qualified class name (package.classname) of
 a subclass of ABall.</div>
</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>model.IPaintStrategyFac</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#makePaint-java.lang.String-">makePaint</a></span>(java.lang.String&nbsp;classname)</code>
<div class="block">Returns an IPaintStrategyFac that can instantiate the strategy specified by
 classname.</div>
</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>model.IStrategyFac&lt;model.IBallCmd&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#makeStrategyFac-java.lang.String-">makeStrategyFac</a></span>(java.lang.String&nbsp;classname)</code>
<div class="block">Returns an IStrategyFac that can instantiate the strategy specified by
 classname.</div>
</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#setSwitcherStrategy-model.IUpdateStrategy-">setSwitcherStrategy</a></span>(model.IUpdateStrategy&lt;model.IBallCmd&gt;&nbsp;Nstrategy)</code>
<div class="block">Sets the new strategy for the ball</div>
</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#start--">start</a></span>()</code>
<div class="block">Start the timer</div>
</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#update-java.awt.Graphics-">update</a></span>(java.awt.Graphics&nbsp;g)</code>
<div class="block">This method will update the sprites's painted locations by painting all the sprites
 onto the given Graphics object.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="BallModel-model.IModel2ViewAdapter-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>BallModel</h4>
<pre>public&nbsp;BallModel(model.IModel2ViewAdapter&nbsp;model2ViewApt)</pre>
<div class="block">BallModel Constructor</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>model2ViewApt</code> - is the adapter from model to view</dd>
</dl>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="start--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>start</h4>
<pre>public&nbsp;void&nbsp;start()</pre>
<div class="block">Start the timer</div>
</li>
</ul>
<a name="loadStrategy-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>loadStrategy</h4>
<pre>public&nbsp;model.IUpdateStrategy&lt;model.IBallCmd&gt;&nbsp;loadStrategy(java.lang.String&nbsp;className)</pre>
<div class="block">The following function in the loadBall(String) reference to
 "https://www.clear.rice.edu/comp310/JavaResources/dynamic_class_load.html", 
 
 The method creates an instance of an ABall, given a fully qualified class name (package.classname) of
 a subclass of ABall.
 The method assumes that there is only one constructor for the supplied class that has the same *number* of
 input parameters as specified in the args array and that it conforms to a specific
 signature, i.e. specific order and types of input parameters in the args array.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>className</code> - A string that is the fully qualified class name of the desired object</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>An IUpdateStrategy of the supplied classname.</dd>
</dl>
</li>
</ul>
<a name="loadBall-model.IUpdateStrategy-model.IPaintStrategy-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>loadBall</h4>
<pre>public&nbsp;void&nbsp;loadBall(model.IUpdateStrategy&lt;model.IBallCmd&gt;&nbsp;ballname,
                     model.IPaintStrategy&nbsp;paint)</pre>
<div class="block">This method add an ABall instance which loaded by the loadBall 
 Send it to the dispatcher</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>ballname</code> - is the type of the ball to be created.</dd>
<dd><code>paint</code> - is the type of the paint object to be created</dd>
</dl>
</li>
</ul>
<a name="clear--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>clear</h4>
<pre>public&nbsp;void&nbsp;clear()</pre>
<div class="block">Clear all the balls on pnl</div>
</li>
</ul>
<a name="update-java.awt.Graphics-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>update</h4>
<pre>public&nbsp;void&nbsp;update(java.awt.Graphics&nbsp;g)</pre>
<div class="block">This method will update the sprites's painted locations by painting all the sprites
 onto the given Graphics object.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>g</code> - The Graphics object from the view's paintComponent() call.</dd>
</dl>
</li>
</ul>
<a name="makeStrategyFac-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>makeStrategyFac</h4>
<pre>public&nbsp;model.IStrategyFac&lt;model.IBallCmd&gt;&nbsp;makeStrategyFac(java.lang.String&nbsp;classname)</pre>
<div class="block">Returns an IStrategyFac that can instantiate the strategy specified by
 classname. Returns a factory for a beeping error strategy if classname is null. 
 The toString() of the returned factory is the classname.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>classname</code> - Shortened name of desired strategy</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A factory to make that strategy</dd>
</dl>
</li>
</ul>
<a name="combineStrategyFacs-model.IStrategyFac-model.IStrategyFac-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>combineStrategyFacs</h4>
<pre>public&nbsp;model.IStrategyFac&lt;model.IBallCmd&gt;&nbsp;combineStrategyFacs(model.IStrategyFac&lt;model.IBallCmd&gt;&nbsp;stratFac1,
                                                              model.IStrategyFac&lt;model.IBallCmd&gt;&nbsp;stratFac2)</pre>
<div class="block">Returns an IStrategyFac that can instantiate a MultiStrategy with the two
 strategies made by the two given IStrategyFac objects. Returns null if
 either supplied factory is null. The toString() of the returned factory
 is the toString()'s of the two given factories, concatenated with "-". 
 If either factory is null, then a factory for a beeping error strategy is returned.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>stratFac1</code> - An IStrategyFac for a strategy</dd>
<dd><code>stratFac2</code> - An IStrategyFac for a strategy</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>An IStrategyFac for the composition of the two strategies</dd>
</dl>
</li>
</ul>
<a name="getSwStrategy--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getSwStrategy</h4>
<pre>public&nbsp;model.strategy.SwitcherStrategy&lt;model.IBallCmd&gt;&nbsp;getSwStrategy()</pre>
<div class="block">This method return the current switch of this ball</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>switcher is the updated state of this ball</dd>
</dl>
</li>
</ul>
<a name="setSwitcherStrategy-model.IUpdateStrategy-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setSwitcherStrategy</h4>
<pre>public&nbsp;void&nbsp;setSwitcherStrategy(model.IUpdateStrategy&lt;model.IBallCmd&gt;&nbsp;Nstrategy)</pre>
<div class="block">Sets the new strategy for the ball</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>Nstrategy</code> - Strategy for switcher</dd>
</dl>
</li>
</ul>
<a name="loadPaint-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>loadPaint</h4>
<pre>public&nbsp;model.IPaintStrategy&nbsp;loadPaint(java.lang.String&nbsp;classname)</pre>
<div class="block">The following function in the loadBall(String) reference to
 "https://www.clear.rice.edu/comp310/JavaResources/dynamic_class_load.html", 
 The following method returns an instance of IPaintStrategy, given the fully qualified paint class name of IPaintStrategy</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>classname</code> - A string that is the fully qualified class name of the desired object</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>An IPaintStrategy of the supplied classname.</dd>
</dl>
</li>
</ul>
<a name="makePaint-java.lang.String-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>makePaint</h4>
<pre>public&nbsp;model.IPaintStrategyFac&nbsp;makePaint(java.lang.String&nbsp;classname)</pre>
<div class="block">Returns an IPaintStrategyFac that can instantiate the strategy specified by
 classname. Returns a factory for a beeping error strategy if classname is null. 
 The toString() of the returned factory is the classname.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>classname</code> - Shortened name of desired strategy</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A factory to make that paint strategy</dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../model/package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/BallModel.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev&nbsp;Class</li>
<li>Next&nbsp;Class</li>
</ul>
<ul class="navList">
<li><a href="../index.html?model/BallModel.html" target="_top">Frames</a></li>
<li><a href="BallModel.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
