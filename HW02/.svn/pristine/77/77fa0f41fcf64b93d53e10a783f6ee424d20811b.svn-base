package controller;

import java.awt.Color;
import java.awt.EventQueue;
import java.awt.Graphics;

import balls.ASprite;
import model.*;
import view.*;

/**
 * MVC Controller for the system
 */
public class Controller {

	// Fields for the adapters to close over:
	private BallModel model;  // starts off null but will be fine when the constructor is finished.
	private BallGUI view;  // starts off null but will be fine when the constructor is finished.
	
	private int x_position = 10;
	private int y_position = 10;
	private int radius = 10;
	
	/**
	 * Controller constructor builds the system
	 */
	public Controller() {
	
		// Here the model is shown being constructed first then the view but it could easily be the other way around if needs dictated it. 
	
		// set the model field
		model = new BallModel( new IModel2ViewAdapter() {

			@Override
			public void update() {
				view.update();
//				System.out.println("hello");
			}
		
			// In the adapter code, one can reference the view field above because it is in scope.
			// It's ok that the view field is currently null because it will be set below.  Just don't start the model yet!
	
			// adapter methods elided
		
		}); 
		
		// set the view field
		view = new BallGUI( new IView2ModelAdapter() {

			@Override
			public void paint(Graphics g) {
				// TODO Auto-generated method stub
//				System.out.println("View2Model paint() is called");
				clearCanvas();
				model.add(new ASprite(x_position, y_position, radius, Color.RED));
				x_position += 2;
				y_position += 2;
				model.update(g);
			}
			
			@Override
			public void clearCanvas() {
				model.clearAllBalls();
			}
			// In the adapter code, one can reference the model field above because it is in scope.
			// The model field is already set here but it doesn't matter if it was or wasn't.   Don't start the view yet!
	
			// adapter methods elided
		
		}); 
		
		// At this point, both the model and view are instantiated as well as both adapters and both adapters reference non-null model and view fields. 
		
		// NEITHER MODEL NOR VIEW SHOULD BE STARTED YET! 
	}
	
	/**
	 * Start the system
	 */
	public void start() {
		model.start();  // It is usually better to start the model first but not always.
		view.start();	
	}
	
	/**
	 * Launch the application.
	 * @param args Arguments given by the system or command line.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {   // Java specs say that the system must be constructed on the GUI event thread.
			public void run() {
				try {
					Controller controller = new Controller();   // instantiate the system
					controller.start();  // start the system
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
}