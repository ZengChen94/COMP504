package balls;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Point;
import java.util.Observable;
import java.util.Observer;

public abstract class ABall implements Observer{
	protected Point location;
	protected int radius;
	protected Point velocity;
	protected Color color;
	protected Component canvas;
	
	public ABall(Point location, int radius, Point velocity, Color color, Component canvas){
		set_location(location);
		set_radius(radius);
		set_velocity(velocity);
		set_color(color);
		set_canvas(canvas);
	}
	
	public void set_location(Point location) {
		this.location = location;
	}
	
	public void set_radius(int radius) {
		this.radius = radius;
	}
	
	public void set_velocity(Point velocity) {
		this.velocity = velocity;
	}
	
	public void set_color(Color color) {
		this.color = color;
	}
	
	public void set_canvas(Component canvas) {
		this.canvas = canvas;
	}
	
	public Point get_location() {
		return this.location;
	}
	
	public int get_radius() {
		return this.radius;
	}
	
	public Point get_velocity() {
		return this.velocity;
	}
	
	public Color get_color() {
		return this.color;
	}
	
	public Component get_canvas() {
		return this.canvas;
	}
	
	public void updatingState(){
		specifyBall();
		moving();
		bouncing();
	}
	
	public abstract void specifyBall();
	
	public void paint(Graphics g){
		g.setColor(get_color());
		g.fillOval(location.x-radius, location.y-radius, radius*2, radius*2);
	}
	
	public void moving() {
		location.x += velocity.x;
		location.y += velocity.y;
	}
	
	public void bouncing (){
		while (this.location.x - this.radius < 0 || this.location.x + this.radius > this.canvas.getWidth() || this.location.y - this.radius < 0 || this.location.y + this.radius > this.canvas.getHeight()) {
			//hit left
			if (this.location.x - this.radius < 0) {
	            this.get_velocity().x = -this.get_velocity().x;
	            this.location.x = 2*this.radius - this.location.x;
	        } 
	        //hit right
			if(this.location.x + this.radius > this.canvas.getWidth()){
	        	this.get_velocity().x = -this.get_velocity().x;
	        	this.location.x = 2*(this.canvas.getWidth()-this.radius) - this.location.x;
	        }
			//hit top
	        if (this.location.y - this.radius < 0) {
	            this.get_velocity().y = -this.get_velocity().y ;
	            this.location.y = 2*this.radius - this.location.y;
	        }
	        //hit bottom
	        if (this.location.y + this.radius > this.canvas.getHeight()) {
	        	this.get_velocity().y = -this.get_velocity().y ;
	        	this.location.y = 2*(this.canvas.getHeight()-this.radius) - this.location.y;
	        }
		}
	}
	
	@Override
	public void update(Observable o, Object arg) {
		updatingState();
		paint((Graphics) arg);
	}
}
